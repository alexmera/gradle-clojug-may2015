// Se "integra" el plugin war - Genera el archivo .war
apply plugin: 'war'
// Se "integra" el plugin externo jettyEclipse - Despliega en jetty 9 usando ./gradlew jettyEclipseRun
apply plugin: 'jettyEclipse'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath(group: 'com.sahlbach.gradle', name: 'gradle-jetty-eclipse-plugin', version: '1.9.+')
    }
}

// extra properties para el proyecto
ext {
    JAVA_VERSION = "1.8"
    SPRING_FRAMEWORK_VERSION = '4.1.6.RELEASE'
    // Ruta del war exploded
    explodedWarPath = "${buildDir}/explodedWar"
    // funcion delay disponible en el proyecto

    delay = {
        def ini = System.currentTimeMillis()
        sleep(2 * 1000)
        println("Sleep time (ms): " + (System.currentTimeMillis() - ini))
    }

}

// Información de publicación: Maven / Ivy
group = 'org.clojug'
version = '1.0'

// Configuraciónes para la compilación y procesamiento de recursos
sourceCompatibility = JAVA_VERSION
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// Repositorios desde donde obtener las dependencias
repositories {
    // 'jcenter' - https://bintray.com/bintray/jcenter
    jcenter()
}

// En esta sección se declaran las dependencias del proyecto
dependencies {
    // SLF4J logging API
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    // Spring Framework dependencias
    compile "org.springframework:spring-context-support:${SPRING_FRAMEWORK_VERSION}"
    compile "org.springframework:spring-webmvc:${SPRING_FRAMEWORK_VERSION}"
    compile 'org.thymeleaf:thymeleaf-spring4:2.1.4.RELEASE'
    // Commons Lang
    compile 'org.apache.commons:commons-lang3:3.4'
    // API Servlet 3
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    // JUnit.
    testCompile 'junit:junit:4.12'
    testCompile "org.springframework:spring-test:${SPRING_FRAMEWORK_VERSION}"
}

// Se configura el task wrapper para usar la version 2.4 de gradle
task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}


task explodedWar(type: Copy) {
    into explodedWarPath
    with war
}

task undeploy() << {
    delete tomcatDeployPath
    delay()
}

task deploy(dependsOn: explodedWar) {
    mustRunAfter undeploy
    doLast {
        copy {
            from explodedWarPath
            into tomcatDeployPath
        }
    }

}

task redeploy() {
    dependsOn undeploy, deploy
}



